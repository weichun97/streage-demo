package com.github.weichun97.strategydemo.v1;

import com.github.weichun97.strategydemo.PayTypeVar;

/**
 * 纯面向过程
 *
 * 优点：符合计算机思维，一行一行线性运行。
 *
 * 缺点：
 *  1. 存在大量相似代码混杂在一起，及其容易出错，如修改微信支付的业务逻辑，由于代码相似可能会改到支付宝的支付方法里面。
 *  2. 主方法代码多且杂乱，对于理解业务逻辑很不方面，不利于维护和交接
 *  3. 不利于扩展，如果后续增加一种支付方式，需要修改主方法，如果对业务不熟，很可能导致整个支付方法报错。并且使主类越来越臃肿。
 *
 * 适用场景：
 *  1. 业务简单，代码量少
 *      比如：ifelse 中的代码一两行就写完了，这种就没必要为了使用策略模式创建一堆类了。
 *  2. 类型固定
 *      比如：某一活动，男的需要支付100，女的需要支付80。对于性别这种固定的类型，也没必要使用策略模式， 但是对于支付这种不确定的类型，推荐使用策略模式
 *  3. 类型少
 *      比如：性别只有两种，可以直接使用ifelse，如果以后业务复杂起来了，再改成策略模式的工作量也不会太大
 *
 *  *** 以上情况不是绝对，具体情况需要开发人员根据经验自行判断。
 *  比如: 蛇口港邮轮的航道类型存在铜鼓大桥和青马大道，理论上是日后可能会存在新的航道的，但是经过再三和客户确定后，
 *      并告知客户日后增加航道会涉及代码的改动后，客户坚持不会加新航道后，此处可以不使用策略模式，并且即便是要改动，
 *      由于只有两个类型，所以改动的工作量也不打，所以直接使用ifelse处理
 *
 * @author chun
 * @date 2021/6/24 9:49
 */
public class Start {

    public static void main(String[] args) {
        int type = 2;

        // 其他业务逻辑 50 行
        // .................
        // .................
        // .................
        // .................

        if(PayTypeVar.WECHAT == type){
            String sign = getWechatSign();
            String res = runWechatPay(sign);
            wechatCallback(res);
        }
        else if(PayTypeVar.ALI == type){
            String sign = getAliSign();
            String res = runAliPay(sign);
            aliCallback(res);
        }
        else if(PayTypeVar.CMB_BANK == type){
            String sign = getCmbBankSign();
            String res = runCmbBankPay(sign);
            cmbBankCallback(res);
        }
        else if(PayTypeVar.CONSTRUCTION_BANK == type){
            String sign = getConstructionBankSign();
            String res = runConstructionBankPay(sign);
            constructionBankCallback(res);
        }
        else{
            System.out.println("错误的支付类型");
        }

        // 其他业务逻辑 50 行
        // .................
        // .................
        // .................
        // .................
    }

    /**
     * 建设回调
     * @param res
     */
    private static void constructionBankCallback(String res) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("建设回调");
    }

    /**
     * 招商回调
     * @param res
     */
    private static void cmbBankCallback(String res) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("招商回调");
    }

    /**
     * 阿里回调
     * @param res
     */
    private static void aliCallback(String res) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("阿里回调");
    }

    /**
     * 微信回调
     * @param res
     */
    private static void wechatCallback(String res) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("微信回调");
    }

    /**
     * 建设支付
     * @param sign
     * @return
     */
    private static String runConstructionBankPay(String sign) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("建设支付");
        return "建设支付返回的结果";
    }

    /**
     * 招商支付
     * @param sign
     * @return
     */
    private static String runCmbBankPay(String sign) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("招商支付");
        return "招商支付返回的结果";
    }

    /**
     * 阿里支付
     * @param sign
     * @return
     */
    private static String runAliPay(String sign) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("阿里支付");
        return "阿里支付返回的结果";
    }

    /**
     * 微信支付
     * @param sign
     * @return
     */
    private static String runWechatPay(String sign) {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("微信支付");
        return "微信支付返回的结果";
    }

    /**
     * 获取建设银行支付签名
     * @return
     */
    private static String getConstructionBankSign() {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("建设支付签名");
        return "建设支付签名";

    }

    /**
     * 获取招商支付签名
     * @return
     */
    private static String getCmbBankSign() {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("招商支付签名");
        return "招商支付签名";
    }

    /**
     * 获取阿里支付签名
     * @return
     */
    private static String getAliSign() {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("阿里支付签名");
        return "阿里支付签名";
    }

    /**
     * 获取微信支付签名
     * @return
     */
    private static String getWechatSign() {
        // 此处省略100行.......
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        //..............,....
        System.out.println("微信支付签名");
        return "微信支付签名";
    }
}
